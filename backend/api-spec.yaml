openapi: 3.0.0
info:
  title: Cafelog API
  description: REST API for Cafelog application
  version: 1.0.0
  contact:
    name: Cafelog Team
servers:
  - url: http://localhost:8000
    description: Development server
paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      description: Create a new user with the provided information
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Conflict - user with email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user
      description: Update a user's information
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int32
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      description: Delete a user by their ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int32
            minimum: 1
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully
        '400':
          description: Bad request - invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the user
          example: 1
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        name:
          type: string
          description: User's name
          minLength: 2
          example: John Doe
        age:
          type: integer
          format: int32
          description: User's age
          minimum: 0
          maximum: 150
          nullable: true
          example: 25
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: 2024-01-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
          example: 2024-01-01T12:00:00Z
      required:
        - id
        - email
        - name
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        name:
          type: string
          description: User's name
          minLength: 2
          example: John Doe
        age:
          type: integer
          format: int32
          description: User's age
          minimum: 0
          maximum: 150
          nullable: true
          example: 25
      required:
        - email
        - name
    UpdateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        name:
          type: string
          description: User's name
          minLength: 2
          example: John Doe
        age:
          type: integer
          format: int32
          description: User's age
          minimum: 0
          maximum: 150
          nullable: true
          example: 25
      description: All fields are optional for update
    Error:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          description: HTTP status code
          example: 404
        message:
          type: string
          description: Error message
          example: User not found
        error:
          type: string
          description: Error type
          example: Not Found
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: 2024-01-01T12:00:00Z
        path:
          type: string
          description: API path where error occurred
          example: /users/123
      required:
        - statusCode
        - message
    ValidationError:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          description: HTTP status code
          example: 400
        message:
          type: array
          items:
            type: string
          description: Array of validation error messages
          example: 
            - "email must be a valid email"
            - "name must be at least 2 characters long"
        error:
          type: string
          description: Error type
          example: Bad Request
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: 2024-01-01T12:00:00Z
        path:
          type: string
          description: API path where error occurred
          example: /users
      required:
        - statusCode
        - message